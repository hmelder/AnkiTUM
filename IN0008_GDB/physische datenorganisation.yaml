title: 'GDB: Kapitel 7: Physische Datenorganisation'
author: HHuebner
id: 402722605

cards:
- type: markdown
  id: 0  # (generated)
  front: Unterschied random vs chained IO?
  back: Bei HDD disks werden Daten sequestiell von der Platte gelesen, daher ist sind
    Zugriffe an "zufalls" Positionen sehr langsam


- type: markdown
  id: 1  # (generated)
  front: Was ist die MTTF, MTTR, MTTDL?
  back: |+
    mean time to ...
    - failure
    - repair
    - data loss

    Bei einer Platte


- type: markdown
  id: 2  # (generated)
  front: RAID 0?
  back: |+
    - striping
    - Verteilt Daten auf mehrere Platten um Performance zu erhöhen
    - Fällt eine Platte aus sind nicht alle betroffen


- type: markdown
  id: 3  # (generated)
  front: RAID 1?
  back: |+
    - Spiegelt Daten, sodass alle Daten zwei mal auf unterschiedlichen Platten vorhanden sind

- type: markdown
  id: 4  # (generated)
  front: RAID 2?
  back: |+
    - Zusätzliches speichern von Fehlererkennungs-/Korrekturcodes 

- type: markdown
  id: 5  # (generated)
  front: RAID 3?
  back: |+
    - Zusätzliche Paritätplatte P mit XOR aller platten
    - **Eine** ausgefallene Platte kann wiederhergestellt werden


- type: markdown
  id: 6  # (generated)
  front: RAID 4, 5?
  back: |+
    - Aufteilen der Platten in kleinere Blöcke
    - Kleine Paritätsblöcke
    - bessere Lastenbalancierung
      

- type: cloze
  id: 7 # (generated)
  front: |
    B-Bäume sind für den {{c1::Hintegrundspeicher}} Konzipiert. 
    Daher zeigen die Knoten typischerweise auf ganze {{c1::Seiten}}


- type: markdown
  id: 8  # (generated)
  front: Wofür wird indexing verwendet?
  back: |+
    - Anlegen der Daten in einer Relation in Suchbaum
    - Es wird nach einer oder mehreren Spalten geindext
    - elemente aus geindexer spalte können schnell gefunden werden


- type: markdown
  id: 9  # (generated)
  front: Welche Vorteile haben B trees gegenüber anderen Bäumen?
  back: |-
    - Selbstbalancierend
    - Geringere Tiefe, da mehrere Kindknoten erlaubt sind
    - Gutes Cacheverhalten / Räumliche lokalität
    - Flexibele Knotengröße

- type: markdown
  front: |
    Nennen Sie einen Vorteil und einen Nachteil von Hashtabellen gegenüber B+
    Bäumen.
  back: |
    - Vorteil: Hashtabellen haben die Laufzeitkomplexität **O(1)** bei der Suche, B+-Bäume **O(log n)**.
    - Nachteil: Auf Hashtabellen können **Bereichsanfragen nicht effizient** ausgeführt werden.