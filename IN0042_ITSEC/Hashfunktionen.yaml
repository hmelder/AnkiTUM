title: Hashfunktionen
author: Hugo Melder
id: 1709156765
cards:

- type: md_basic
  id: 0  # (generated)
  front: Wie wird ein HMAC gebildet, wenn m die Nachricht, K der secret key und H
    die Hashfunktion ist?
  back: |
    innerHash = H(K' xor ipad) | m)
    HMAC(K. m) = H((K' xor opad) | innerHash)

    Wobei K' ein vom Secret Key abgeleiteter Schlüssel mit fester Blockgröße ist.

    "|" ist hierbei die Konkatenierung von Strings.

- type: md_basic
  id: 1  # (generated)
  front: Was ist die Idee einer kryptografischen Hashfunktion?
  back: |
    Erstellen eines „digitalen“ Fingerabdrucks h für ein Dokument / eine
    Nachricht m, sodass h das Dokument m repräsentiert.

- type: md_basic
  id: 2  # (generated)
  front: Was ist ein **Message Digest**?
  back: |
    Ein **Message Digest** ist eine numerische Representation fester Größe einer Nachricht,
    die von einer kryptographischen Hashfunktion berechnet wurde.

- type: md_basic
  id: 3  # (generated)
  front: Wie funktioniert das *Merkle-Damgård* Verfahren?
  back: |
    Gegeben Kompressionsfunktion f und IV. **IV** ist ein  Initialisierungsblock
    für die Verarbeitung von Block m1.

    1. Zerlegen der Eingabe m in Blöcke: m = m1 | m2 | ... | mn
    2. Blockweises komprimieren mit Kompressionsfunktion f

    [[image: merkledamgard.png]]

- type: md_basic
  id: 4  # (generated)
  front: Wie funktionert das **Sponge**-Prinzip?
  back: |
    Zwei Phasen:
    1. **Aufsaugen**
      - Initialzustand init = r | c mit 0-Bits gefüllt.
    2. **Ausgeben**
      - *Schrittweise Entnahme* von r-Bits aus den Zwischenzuständen; die r-Bits sind Ausgabebits.

    [[image: sponge.png]]

- type: md_basic
  id: 5  # (generated)
  front: Gibt es Einschränkungen bei der Länge des Hashs bei dem Spongeprinzip?
  back: |
    Nein. Länge der Ausgabe ist **flexibel bestimmbar**. Hash kann eine flexible Länge haben.

- type: md_basic
  id: 6  # (generated)
  front: Was ist der Unterschied zwischen einer Hashfunktion und einem MAC?
  back: |-
    Jeder kann einen **Hashwert** berechnen, es ist **kein Ursprungsnachweis**!

    Lösung: Einbringen eines **gemeinsamen Geheimnisses**, z.B. eines shared Key
    K_AB, in die Hash-Berechnung.

    Der **Authentizitätsnachweis**: Kenntnis des Schlüssels K_AB nachweisen.

- type: md_basic
  id: 7  # (generated)
  front: Beschreibe den Aufbau eines MACs
  back: |
    - Hashfunktion mit Schlüssel: H: EK * M^* -> M^n
    - Pre-shared Secret **k_AB** zwischen Partnern A, B
    - MAC-Berechnung: mac = H(m') mit m' = k_AB | m (m ist die Nachricht)
    - Empfänger prüft Authentizität und Integrität von m' mit k_AB

- type: md_basic
  id: 8  # (generated)
  front: |
    Was ist ein großes Problem wenn die Hashfunktion bei MAC auf der
    Merkle-Damgård Konstruktion beruht?
  back: |
    **Length Extension Angriffe** sind möglich.

- type: md_basic
  id: 9  # (generated)
  front: Wie funktioniert ein **Length Extension Angriff**?
  back: |
    1. Gegeben authentisierte Nachricht: data, h=SHA-1(kmac | data)
    2. Konkateniere nun fake an die ursprünglichen Daten: data' = data | fake
    3. Berechnung eines **validen Hashes** kann aber hier **ohne Besitz** des Secrets erfolgen

    h' = SHA-1(h | fake'), (fake ' ist eine gepaddete Version von fake)

- type: md_basic
  id: 10  # (generated)
  front: Warum funktionieren Length Extension Angriffe bei SHA-1?
  back: |
    Basiert auf der Merkle-Damgård Konstruktion und gibt somit den **internen
    Zustand** als Hashwert h aus.

- type: md_basic
  id: 11  # (generated)
  front: Welche SHA Hashfunktionen sind resilient gegen length extension Angriffe?
  back: |
    - SHA-3
    - SHA-512/256 (Von den 512-bit werden *256-bit* weiter genutzt)

- type: md_basic
  id: 12  # (generated)
  front: |
    Gegeben ist die folgende Berechnungsvorschrift für einen MAC(m, k_AB) = H(m|k_AB).
    Warum ist diese Art von Message-Authentication Code als **kritisch einzustufen**?
  back: Bei der Konstruktion reicht es eine Kollision für die Nachricht m zu finden,
    um den MAC für jeden beliebigen Schlüssel zu brechen.

- type: md_basic
  id: 13  # (generated)
  front: Was ist die sicherer? MAC-then-Encrypt oder Encrypt-then-MAC?
  back: |
    **Encrypt-then-MAC**, da wir zuerst die Integrität des Ciphertext mit dem MAC
    überprüfen, **bevor** wir andere Validierungs/Entschlüsselungsmaßnahmen
    starten.

    Andersrum bestünde kein Integritätsschutz, da dieser schon bei der Entschlüsselung
    des nicht-überprüften Ciphertexts verletzt wird.

- type: md_basic
  id: 14  # (generated)
  front: Was ist das Vorgehen beim Erstellen einer **elektronischen/digitalen Signatur**?
  back: |
    1. Hashen einer beliebigen Nachricht mit Hashfunktion H
    2. Signieren des Hashes (Message Digest) mit Signaturalgorithmus

- type: md_basic
  id: 15  # (generated)
  front: Wie werden **elektronische/digitale Signaturen** überprüft?
  back: |-
    B erhält sig und m und kennt Hashfunktion H.

    1. B besitzt den öffentlichen Schlüssel e von A (offener Austausch)
    Rekonstruktion eines Hashwertes und durch Signatur-Validierung:
    RSA_e(sig) = sig^e mod n = h'.
    2. Validieren: h' = H(m)?
