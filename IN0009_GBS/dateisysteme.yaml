title: 'GBS: Kapitel 7: Dateisysteme'
author: HHuebner
id: 3993332231
cards:
- type: md_basic
  id: 0  # (generated)
  front: Welche Aufgaben hat das Dateisystem?
  back: |+
    - Virtualisierung der Disk
    - Implementierung von Dateien / Ordnern
    - Organisation von Dateien
    - Verwaltung von Zugriffsrechten


- type: md_basic
  id: 1  # (generated)
  front: Nenne drei Dateisysteme
  back: |
    - ext2, 3, 4 (Unix)
    - fat16, fat32 (DOS)
    - NTFS (Windows)
    - hfs (macOS)


- type: md_basic
  id: 2  # (generated)
  front: Welche aufgabe hat die Dateiendung?
  back: |+
    - An sich wird die Dateiendung nicht vom Betriebsystem interpretiert.
    - Meistens wird für jede Endung ein default Programm zum öffnen festgelegt.


- type: md_basic
  id: 3  # (generated)
  front: Auf welche drei arten können Dateien strukturiert werden?
  back: |+
    1. Unstrukturiert als folge von bytes
    2. Sequenz von Records / feste Blöcke (heute unüblich)
    3. Baumstruktur mit Blöcken unterschiedlicher Größe (Bei Großrechnern manchmal verwendet)


- type: md_basic
  id: 4  # (generated)
  front: Welche 6 Arten von Dateien gibt es unter Unix?
  back: |+
    1. Reguläre Dateien
    2. Ordner
    3. Character special files (z.b. IO geräte)
    4. Block special files (Massenspeicher, z.b. disk)
    5. FIFO special (pipes)
    6. symbolic link (Verweise auf andere Dateien)


- type: md_basic
  id: 5  # (generated)
  front: Welche zwei Arten von Dateizugriff wurden besprochen?
  back: |+
    1. Sequential access (in älteren Systemen)
    2. Random Access


- type: md_basic
  id: 6  # (generated)
  front: Welche Dateiattribute wurden besprochen?
  back: |+
    - Zugriffsrechte
    - Flags (z.b. Wann die Datei zuletzt verändert wurde)
    - Dateigröße


- type: md_basic
  id: 7  # (generated)
  front: Wie sind Unix Zugriffrechte Aufgebaut?
  back: |+
    - r (read), w (write), x (execute) bits
    - Drei Gruppen: Owner, Group, All

    Beispiel: rwxr-x--- = Nur owner und gruppe können datei lesen und Ausführen. User kann die Datei schreiben


- type: md_basic
  id: 8  # (generated)
  front: Was macht der syscall unlink()?
  back: |+
    Löscht die Datei


- type: md_basic
  id: 9  # (generated)
  front: Was machen die Dateien . und .. bei Unix Systemen
  back: |+
    - "." Verweist auf den momentanen Ordner
    - ".." Verweist auf den übergeordneten Ordner


- type: md_basic
  id: 10  # (generated)
  front: Was ist der MBR?
  back: |+
    - Master Boot Record
    - In Sektor 0 der Platte gespeichert
    - Enthält Bootloader, wird beim starten des Geräts ausgeführt
    - Enthält Partitionstabelle mit max. 16 Einträgen (moderne alternative: GUID partition table)


- type: md_basic
  id: 11  # (generated)
  front: Was ist eine primäre Partition?
  back: |+
    - Die Partition auf der das Betriebssystem installiert ist.


- type: md_basic
  id: 12  # (generated)
  front: Was ist eine extended partition?
  back: |+
    - Eine Partition im MBR welche weitere Partitionen enthält. 
    - Referenzen zu weitere Partitionen (sog. logische Partitionen) werden als linked list gepspeichert


- type: md_basic
  id: 13  # (generated)
  front: Vorteile GUID Partition Table (GPT) vs MBR?
  back: |+
    - GPT ist moderner
    - GPT erlaubt mehr Partitionen gleichzeitig
    - GPT erlaubt größere Partitionen
    - GPT hat backup partition table


- type: md_basic
  id: 14  # (generated)
  front: Was ist ein superblock?
  back: |+
    - Speichert Metadaten über das File system der Partition (z.b. FS type)


- type: md_basic
  id: 15  # (generated)
  front: Was ist eine i-node?
  back: |+
    - Speichert Metadaten über eine Datei im FS (z.b. permissions)


- type: markdown
  id: 29  # (generated)
  front: In welcher Reihenfolge befinden sich die File permission bits?
  back: |+
    - user, group all
    - read, write, execute


- type: markdown
  id: 30  # (generated)
  front: Was ist die SUID bei einem File?
  back: |+
    - Eine Datei mit SUID flag wird mit den permissions des owners ausgeführt


- type: markdown
  id: 31  # (generated)
  front: Was ist die SGID bei einem File?
  back: |+
    - Eine Datei mit SGID flag wird mit den permissions der gruppe des owners ausgeführt



- type: markdown
  id: 32  # (generated)
  front: Was ist das sticky bit bei einem File?
  back: |+
    - Wird bei Verzeichnissen angewendet
    - Nur der owner einer Datei im Verzeichnis darf diese löschen/umbenennen
    - Beispiel /tmp


- type: md_basic
  id: 16  # (generated)
  front: Wie werden i-nodes organisiert?
  back: |+
    - Sequenziell in der i-node table
    - Jede i-node besitzt eine ID


- type: md_basic
  id: 17  # (generated)
  front: Wie sind Verzeichnisse implementiert?
  back: |+
    - Verzeichnisse sind Dateien
    - Enthalten eine Liste von verweisen auf i-nodes IDs der Inhalte und die Pfade


- type: md_basic
  id: 18  # (generated)
  front: Was ist ein Block bei Unix?
  back: |+
    - Kleinste Speichereinheit auf der Disk


- type: md_basic
  id: 19  # (generated)
  front: Was sind direct und indirect blocks bei Unix systemen?
  back: |+
    - Teile von i-nodes
    - Speichern Verweise auf die Blöcke die ein FIle ausmachen
    - Indirect blocks sind Verweise auf Verweise in Baumstruktur (singe = tiefe 1, double = tiefe 2...)


- type: md_basic
  id: 20  # (generated)
  front: Wie werden i-nodes organisiert?
  back: |+
    - Sequenziell in der i-node table
    - Jede i-node besitzt eine ID


- type: md_basic
  id: 21  # (generated)
  front: Was ist eine File Allocation Table?
  back: |+
    - Eine möglichkeit Dateien zu implementieren
    - Liste von Blöcken die zu einer Datei gehören
    - FAT muss vollständig im Hauptspeicher liegen -> Sehr großer Verschnitt
    - Moderne Alternative: i-nodes


- type: md_basic
  id: 22  # (generated)
  front: Wie können variable Längen bei Dateien implementiert werden?
  back: |
    - Zeichenlimitierung
    - Pointer auf den Heap -> Speichern als Hashmap, da die Dateisuche in einem Ordner sosnt lanmgsam wird

- type: md_basic
  id: 23  # (generated)
  front: Was ist der Unterscheid zwischen Hard links und symbolic links?
  back: |+
    Hard Links:
    - Verzeichnis verweist direkt auf die i-node der gelinkten Datei
    - Gelinkte Datei hat einen reference counter in der i-node
    - mit dem syscall unlink() wird der link entfernt -> Dateien ohne links werden gelöscht
    Symbolic links:
    - Eine Datei vom Typ "symbolic link" wird erstellt welche auf die verlinkte Datei verweist

- type: md_basic
  id: 24  # (generated)
  front: Was sind Journaling Dateisysteme?
  back: |+
    - Erstellen log Einträge über alle Operationen 
    - Abschluss der Informationen wird auf Platte vermerkt

- type: md_basic
  id: 25  # (generated)
  front: Welchen Vorteil haben Journaling Dateisysteme?
  back: Robuster gegen crashes, da Veränderungen wieder hergestellt werden falls Hauptspeicher
    gelöscht

- type: md_basic
  id: 26  # (generated)
  front: Was ist eine Idempotente Operation?
  back: Wiederholtes ausführen der Operation führt zum selben ergebnis

- type: md_basic
  id: 27  # (generated)
  front: Was ist das VFS?
  back: |+
    - Virtual File System
    - Abstrahiert verschiedene Dateisysteme
    - stellt für Anwendungen ein Homogenes Interface dar
    - Transparent für Anwendungen
    - Implementiert standard Unix syscalls (open, write...)

- type: md_basic
  id: 28  # (generated)
  front: Was ist das File Cache bei Dateisystemen?
  back: |
    - Puffer für Datenblöcke

- type: md_basic
  id: 33  # (generated)
  front: Kann Hugo den Ordner testdir lesen? `drw------- 2 hugo hugo 60 Feb 24 18:31
    testdir`
  back: |
    Er kann die Dateinamen auslesen, aber nicht in den Ordner wechseln, oder
    Information über die Dateien erhalten. Für die letzteren Operationen werden
    execute (x) Rechte benötigt.

- type: md_basic
  id: 34  # (generated)
  front: Warum haben die meisten Ordner auf Unix Systemen das execute (x) Bit gesetzt?
  back: |
    Das execute Bit ist notwendig, um in den Ordner zu wechseln. Ohne dieses Bit
    können keine Metadaten über die Dateien im Ordner abgerufen werden.


- type: md_basic
  id: 35  # (generated)
  front: nenne alle bestandteile einer unix festplatten partition
  back: |+
    - Bootblock
    - Superblock
    - datenblöcke
    - root dirs
    - verzeichnis management
    - i-nodes
    - freie blöcke management


- type: md_basic
  id: 37  # (generated)
  front: nenne alle bestandteile einer ext2,3,4 block group
  back: |+
    - Superblock (enthält root dir)
    - group descriptor
    - i-nodes
    - block bitmap
    - inode bitmap
    - group descriptor


- type: md_basic
  id: 36  # (generated)
  front: Nenne die bestandteile einer I-Node
  back: |
    - File type
    - owner
    - user permissions
    - timestamps
    - hardlink count
    - flags
    - Adressen der referenzierten blöcke

- type: md_basic
  id: 38  # (generated)
  front: Was ist "line discipline"?
  back: |-
    - wie der terminal daten aufnimmt und verarbeitet
    - cooked mode / zeilenorientiert: eingaben werden vorverarbeitet, backspace, echo, enter etc
    - raw mode: Zeichen ungefiltert
