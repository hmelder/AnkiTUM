title: 'GBS: Kapitel 3: Parallele Systeme und Synchronisation'
author: hmelder
id: 5909609343
cards:

- type: md_basic
  id: 0  # (generated)
  front: Welche Interaktionen zwischen Prozessen sind möglich?
  back: |+
    - **Kausale Beziehungen**
    - **Kommunikation**: Austausch von Nachrichten (Auch Rechensystem unabhängig)
    - **Koordinierung**
    - **Konkurrenz**: Prozesse konkurrieren um gemeinsame Ressourcen


- type: md_basic
  id: 1  # (generated)
  front: Warum kann die Parallelität von Aktivitäten zu nicht-deterministischem Verhalten
    von Prozessen führen?
  back: |+
    - Scheduler bestimmt über den Ablauf eines Prozesses (Meistens viele Faktoren z.B. Interrupts).
    - Multi-Core/CPU Systeme mit echter Parallelität


- type: md_basic
  id: 2  # (generated)
  front: Wie können parallele Aktivitäten auf der Modell-Ebene beschrieben werden?
  back: |+
    - **Aktionsstrukturen**: Fokus auf Aktionen und deren Abhängigkeiten
    - **Petri-Netze**: Fokus auf Zuständen und Zustandsübergängen


- type: md_basic
  id: 3  # (generated)
  front: Wie können parallele Aktivitäten auf der Programmiersprachen-Ebene beschrieben
    werden?
  back: |+
    - POSIX Threads (pthread_create, etc.)
    - Prozesshierachien (fork, join)
    - Kommunikationskonzepte (send, recv)
    - Synchronisationskonzepte (lock, unlock)


- type: md_basic
  id: 4  # (generated)
  front: Wie können parallele Aktivitäten auf der Betriebssystem-Ebene beschrieben
    werden?
  back: |+
    - Prozesse (Programme in Ausführung)
    - Threads (Leichtgewichtige Prozesse)
    - Kommunikation
      - Shared Memory
      - Dateien
      - Nachrichten
    - Synchronisation
      - Locks
      - Interrupts


- type: md_basic
  id: 5  # (generated)
  front: Mit welchen zwei Sichten kann das Verhalten von Aktivitäten beschrieben werden?
  back: |+
    - **Aktionen**: Modellierenden Einheiten (z.B. C-Anweisungen, Maschinenbefehl)
    - **Ereignisse** Modellierten Einheiten, die Veränderungen bewirken


- type: md_basic
  id: 6  # (generated)
  front: Was sind die fünf primären Eigenschaften paralleler Systeme
  back: |+
    - Determiniertheit
    - Störungsfreiheit
      - Ausführungsreihenfolge die Aktionen und Ergebnisse nicht beeinflusst
    - Wechselseitiger Ausschluss (engl. mutual exclusion)
      - Max. ein Prozess greift gleichzeitig auf eine gemeinsame Ressource zu
    - Verklemmungsfreiheit (engl. Deadlock)
      - Zyklische Wartesituation zwischen mehreren Prozessen
    - Kein Verhungern (engl. Starvation)
      - Keine Prozesse die nie ausgeführt werden


- type: md_basic
  id: 7  # (generated)
  front: Was ist eine Race Condition?
  back: |+
    - Mindestens zwei Prozesse greifen lesend oder schreibend auf
    gemeinsame Ressourcen zu
    - Das Ergebnis hängt von der Reihenfolge der Prozess-Ausführung ab


- type: md_basic
  id: 8  # (generated)
  front: Wie können Race Conditions verhindert werden?
  back: |+
    Wechselseitiger Ausschluss (engl. mutual exclusion) von konkurrierenden Aktionen.


- type: md_basic
  id: 9  # (generated)
  front: Was ist ein kritischer Abschnitt?
  back: |+
    In Kritischen Abschnitten greifen Prozesse auf gemeinsame
    Ressourcen zu.


- type: md_basic
  id: 10  # (generated)
  front: Was sind die vier Phasen des kritischen Abschnitts
  back: |+
    1. Ausführung der **un**kritischen Abschnitte
    2. **Betreten** eines kritischen Abschnitts
    3. **Ausführung** der Aktionen des kritischen Abschnitts
    4. **Verlassen** des kritischen Abschnitts


- type: md_basic
  id: 11  # (generated)
  front: Was ist das Leser-Schreiber-Problem?
  back: |+
    - Mehrere Leser sind gleichzeitig zugelassen
    - Mehrere Schreiber dürfen nicht gleichzeitig aktiv sein
    - Leser und Schreiber dürfen auch nicht gleichzeitig aktiv sein


- type: md_basic
  id: 12  # (generated)
  front: Was sind die vier Anforderungen an die Realisierung des wechselseitigen Ausschlusses?
  back: |+
    1. Abschnitte sind **wechselseitig** ausgeschlossen
    2. **Nicht** von einer Reihenfolge abhängig sein
    3. Keine Annahmen über die **Ausführungszeit** eines Prozesses
    4. Kein Prozess darf einen anderen Prozess *unendlich lange daran hindern*, seinen kritischen Abschnitt auszuführen


- type: md_basic
  id: 13  # (generated)
  front: Wie kann der wechselseitige Ausschluss auf der Hardwareebene implementiert
    werden?
  back: |+
    - Interrupts sperren (disabling), Unterbrechungssperre
    - Atomare Maschinenbefehle u.a. TSL, cmpxchg


- type: md_basic
  id: 14  # (generated)
  front: Nenne zwei einfache Betriebsystemdienste die als Locking Mechanismen dienen.`
  back: |+
    - Dienste mit *aktiven* Warten: z.B. Spin-Lock
    - Dienste mit *passiven* Warten: sleep, wakeup


- type: md_basic
  id: 15  # (generated)
  front: Warum kann man ein Mutex auch als eine binäre Semaphore bezeichnen?
  back: |+
    Eine binäre Semaphore hat nur zwei Zustände: 0 und 1. Ein Mutex ist ähnlich, da er ebenfalls nur zwei Zustände hat: gesperrt (locked) und entsperrt (unlocked).


- type: md_basic
  id: 16  # (generated)
  front: Was ist das Konzept von Eigentum bei einem Mutex?
  back: |+
    Konzept von "Eigentum": Nur der Thread, der den Mutex gesperrt hat, darf ihn auch wieder entsperren.


- type: md_basic
  id: 17  # (generated)
  front: Was passiert mit einem aktiven Prozess, wenn ein Interrupt signalisiert wird?
  back: |+
    Bei Signalisierung eines Interrupts wird der aktive Prozess unterbrochen und in den Zustand rechenwillig/wartend überführt, wobei er die CPU freigibt. Die Unterbrechung wird dann durch einen Handler (oder Interrupt Service Routine ISR) behandelt.


- type: md_basic
  id: 18  # (generated)
  front: Warum ist eine Unterbrechungssperre nur bei Ein-Prozessorsystemen zur Realisierung
    kritischer Abschnitte geeignet?
  back: |+
    In Multi-Prozessor Systemen verhindert die Unterbrechungssperre auf **einem** CPU nicht, dass andere Prozessoren auf die geteilte Ressource zuzugreifen.


- type: md_basic
  id: 19  # (generated)
  front: Warum müssen Kritische Abschnitte, die durch Unterbrechungssperren geschützt
    sind, kurz sein?
  back: |+
    Lange kritische Abschnitte mit deaktivierten Interrupts verhindern das Behandlen von anderen wichtigen Unterbrechnungen. Die Folge sind Verzögerungen, oder das Verpassen von Events/Benachrichtigungen.


- type: md_basic
  id: 20  # (generated)
  front: Warum sollte das Konzept einer Unterbrechnungssperre höchstens im Betriebssystem-Kern
    verwendet werden?
  back: |+
    - Grundbaustein für wichtige Dienste im Betriebsystem. Falsche Anwendung kann zur Instabilität, oder zum Absturz führen.
    - Einschränkung der Privilegien auf Nutzerebene


- type: md_basic
  id: 21  # (generated)
  front: Wofür kann der "Compare and Exchange" Befehl verwendet werden?
  back: |+
    Atomarer Austausch von zwei Werten.

    Beispiel Spin-Lock:
    ```asm
    enter_crit_region:
      mov rax, $0 ; Expected val
      mov rbx, $42 ; New value
      cmpxchg [lock], rbx
      jne enter_crit_region ; Busy-Waiting
      ret

    leave_crit_region:
      mov [lock], $0 ; Reset lock to 0
    ret
    ```


- type: md_basic
  id: 22  # (generated)
  front: Wann sind Spin-Locks (aktives Warten) von Vorteil?
  back: |+
    - (Sehr) kurze Wartezeiten (gerade bei Multi-Core/CPU Systemen)
    - Weniger Overhead (kein Kontextswitch) kann bei schnellen Wechseln (bzw. sehr kurzen kritischen Abschnitten) effizienter sein


- type: md_basic
  id: 23  # (generated)
  front: Kann aktives Warten zum Problem werden?
  back: |+
    Bei längeren kritischen Abschnitten, oder Wartezeiten.


- type: md_basic
  id: 24  # (generated)
  front: Erkläre die Semantik der P-Operation bei Semaphoren und wie sie funktioniert.
  back: |+
    Die P-Operation (down) dekrementiert die Kontrollvariable s. Falls s < 0 wird, muss der Prozess warten. Bei passivem Warten wird der Prozess in den Zustand wartend überführt und in einer Wait-Queue verwaltet.


- type: md_basic
  id: 25  # (generated)
  front: 'Was wird durch die V-Operation bei Semaphoren erreicht und wie interagiert
    sie mit der Wait-Queue? '
  back: |+
    Die V-Operation (up) inkrementiert die Kontrollvariable s. Bei passivem Warten wird, falls die Wait-Queue nicht leer ist, ein Prozess aus der Queue in den Zustand rechenbereit überführt.


- type: md_basic
  id: 26  # (generated)
  front: Beschreibe, wie Semaphoren zur Realisierung kritischer Abschnitte genutzt
    werden.
  back: |+
    Semaphoren werden verwendet, indem ein Semaphor-Objekt definiert und seine Kontrollvariable initialisiert wird. Kritische Abschnitte werden dann mit P- und V-Operationsaufrufen geklammert, um wechselseitigen Ausschluss zu gewährleisten.


- type: md_basic
  id: 27  # (generated)
  front: Wie wird das Erzeuger-Verbraucher-Problem unter Verwendung von Semaphoren
    korrekt gelöst?
  back: |+
    Zur Lösung werden zwei zusätzliche Semaphore verwendet: "voll", initialisiert mit 0, zählt die Elemente im Puffer, und "leer", initialisiert mit der Anzahl der Pufferplätze, zählt die freien Pufferplätze. Der Producer und Consumer nutzen diese Semaphore, um den Zugriff auf den Puffer zu synchronisieren.

    # Warum reicht bei dem Erzeuger-Verbraucher-Problem nicht ein einziges Semaphor?


- type: md_basic
  id: 28  # (generated)
  front: Was ist das Monitor-Konzept?
  back: |+
    - Ziel: Abstrahieren von Semaphoren und Integrierung in Datenstrukturen
    - Vermeiden von Problemen, wie
      - vertauschen der Operationen P und V
      - vergessen der zu einer P- zugehörigen V-Operation
    - Beispiel: Methoden *Produce* und *Consume* auf gekapselten Puffer


- type: md_basic
  id: 29  # (generated)
  front: Warum sind Mutexe != binäre Semaphore?
  back: |+
    - Mutexe haben einen **Owner**, Semaphore haben **keine** Owner.
    - Mutexe sind Locks: Sie realisieren mutual exclusion und können vor Races schützen.
    - Semaphore dienen zum Synchronisieren von Aktionen: z.B. im Producer-Consumer Problem modellieren sie die Anzahl der vollen bzw. leeren Plätze im Puffer.


- type: md_basic
  id: 30  # (generated)
  front: Was ist das "Speisende Philosophen" Problem?
  back: |2+


- type: md_basic
  id: 31  # (generated)
  front: Was sind die Takeaways vom "Speisenden Philosophen" Problem?
  back: |+
    - Kritische Abschnitte so kurz wie möglich halten, da unser Programm sonst zu einem sequentiellen Ablauf degeneriert.
    - Es kann immer nur ein Philosoph gleichzeitig essen.
    - Ressourcen erst belegen, wenn alle verfügbar sind.


- type: md_basic
  id: 32  # (generated)
  front: Nenne die vier Bedingung für Deadlocks.
  back: |+
    1. **Exklusiv** nutzbare Ressource (Mutual Exclusion)
    2. **Belegen und Anfordern** (Hold-and-wait)
    3. **Nicht Entziehbar** (no-preemption)
    4. **Zyklische Wartebedingung** (Circular wait): zyklische Kette von min. zwei Prozessen, die jeweils auf eine Ressource warten, die vom nächsten Prozess in der Kette belegt ist.

    Es müssen alle vier Bedingungen erfüllt sein, damit ein Deadlock auftreten kann.


- type: md_basic
  id: 33  # (generated)
  front: Wie können Deadlocks modelliert werden?
  back: |+
    Die vier Deadlock Bedingungen können durch einen gerichteten Graphen, den **Belegungsanforderungsgraphen**, modelliert werden.
    - **Knoten**: Prozesse (Kreise) und Ressourcen (Quadrate)
    - **Kanten**
      - Prozess A belegt Ressource R: gerichtete Kante *von R zu A*
      - Prozess A fordert Ressource R an: gerichtete Kante *von A zu R*


- type: md_basic
  id: 34  # (generated)
  front: Nenne die vier Strategien zum Umgang mit Deadlocks.
  back: |+
    1. **Ignorieren**: Vogel-Strauß Methode, wird in BS häufig gemacht z.B. Verwaltung der Prozesstabelle im Linux Kernel.
    2. **Deadlock-Detection** (Erkennung): Das BS erkennt und beseitigt Deadlocks, falls sie auftreten sollten
    3. **Deadlock-Prevention** (Verhinderung): BS setzt eine der Deadlock-Bedingungen außer Kraft
    4. **Deadlock-Avoidance** (Vermeidung): BS führt **keine** Ressourcenzuteilung durch, die potentiell in einem Deadlock enden könnte


- type: md_basic
  id: 35  # (generated)
  front: Wann kann das Ignorieren eines Deadlocks sinnvoll sein?
  back: |+
    Wenn Prozesse neugestartet werden können, oder die Kosten für die Erkennung zu hoch sind.


- type: md_basic
  id: 36  # (generated)
  front: Was sind mögliche Probleme bei der Deadlock Erkennung?
  back: |+
    Komplexität, höhere CPU Nutzung und Execution delay.


- type: md_basic
  id: 37  # (generated)
  front: Was ist ein Problem bei der Vermeidung von Deadlocks?
  back: |+
    - Geringerer Durchsatz
    - Komplexität
    - Schlechte Skalierbarkeit


- type: md_basic
  id: 38  # (generated)
  front: Vorteil und Nachteil des Bankiers-Algorithmus zur Vermeidung von Deadlocks.
  back: |+
    - Vorteil: Kein Ressourcen Entzug
    - Nachteil: Zukünftiger Bedarf muss bekannt sein


- type: md_basic
  id: 39  # (generated)
  front: Vorteil und Nachteil zur Verhinderung von Deadlocks mittels fester Reihenfolge
    bei Zuteilung.
  back: |+
    - Vorteil: Keine Laufzeitprüfungen
    - Nachteil: Statisch, inflexibel


- type: md_basic
  id: 40  # (generated)
  front: 'Vorteil und Nachteil bei Erkennung von Deadlocks mittels periodischen Aufrufen:'
  back: |
    - Vorteil: Interaktive Reaktion
    - Nachteil: Verlust durch Abbruch
