title: 'GBS: Kapitel 9: Virtualisierung'
author: AnkiTUM
id: 39934577650
cards:
- type: markdown
  id: 0  # (generated)
  front: Welche anforderungen gibt es an VMs?
  back: |+
    - Equivalenz: BS und andere anwendungen funktionieren ohne Änderungen
    - Resource Control: Hypervisor in kontrolle über ressourcen
    - Isolation: VMs voneinander isoliert
    - Effizienz: Möglichst niedriger overhead


- type: markdown
  id: 1  # (generated)
  front: Was ist ein VMM / Hypervisor
  back: |+
    - Virtual Machine Monitor
    - Überwacht VM(s)
    - Hat kontrolle über die Ressourcen der VMs 


- type: cloze
  id: 2    # (generated)
  front: Bei {{c1::System}} VMs implementiert der Hypervisor eine virtuelle {{c1::ISA}}


- type: cloze
  id: 3    # (generated)
  front: Die VM ist für das Gast BS {{c1::transparent}}. Aus der sicht des Gast BS
    hat es {{c1::vollständige Kontrolle}} über die Hardware


- type: markdown
  id: 4  # (generated)
  front: Welche Gründe gibt es für System VMs?
  back: |+
    - Emulation
    - Isolation
    - Sicherheit (Der hypervisor braucht keine hohen Priviliegien)
    - flexiblere Ressourcennutzung


- type: markdown
  id: 5  # (generated)
  front: Was ist Binary translation?
  back: |+
    - Hypervisor interpretiert/emuliert Binärcode der Gast VM
    - Sehr komplex, overhead durch software
    - Gast BS kann unmodifiziert ausgeführt werden


- type: markdown
  id: 6  # (generated)
  front: Was ist Hardware unterstützte Virtualisierung?
  back: |+
    - Virtualization extensions: Intel VT-x, AMD-v, ARM
    - Sehr effizientes implementieren von VMs
    - Nicht auf allen Geräten unterstützt


- type: markdown
  id: 7  # (generated)
  front: Was ist der Unterschied zwischen den System/Kernel mode und user mode der
    **CPU**?
  back: |+
    - Im user mode sind einige Instruktionen nicht erlaubt (insb. IO)
    - Der Kernel mode sollte möglichst nur vom BS Kernel ausgeführt werden
    - Typ 1 Hypervisors werden oft im Kernel mode ausgeführt


- type: markdown
  id: 8  # (generated)
  front: Welche drei Instruktionsklassen gibt es?
  back: |+
    - Privileged Instructions (cpu System mode)
    - Sensitive Instructions (Modifizieren Systemkonfiguration oder verhalten sich in user mode/system mode unterschiedlich)
    - Innocuous Instructions (Nicht privilegiert)


- type: markdown
  id: 9  # (generated)
  front: Was versteht man unter "Trap-and-emulate"?
  back: |+
    - Hypervisor definiert bitmap an zugelassenen Instruktionen
    - Ausführung von nicht zugelassener Instruktion führt zu Trap
    - Hypervisor kann nach Trap die Instruktion emulieren


- type: markdown
  id: 10  # (generated)
  front: Was sind VTs in CPUs und was gab es vor deren Einführung?
  back: |+
    - Virtualisierungsechnologien -> CPU erweiterungen
    - Vorher: Dynamischen Umschreiben von Instruktionen
    - Binary Translation, Trap and emulate


- type: cloze
  id: 11 # (generated)
  front: |
    Hypervisor teilt den {{c1::physischen Speicher}} zwischen VMs auf, 
    da sonst mehrere BS um diesen {{c1::konkurrieren}}


- type: markdown
  id: 12  # (generated)
  front: Was ist der Unterschied zwischen Typ 1 und Typ 2 Hypervisors?
  back: |+
    - Typ 1: Wird direkt auf Hardware ausgeführt 
    - Typ 2: Wird auf host BS ausgeführt (z.b. KVM, Virtualbox) 

- type: markdown
  id: 13  # (generated)
  front: Was versteht man unter einer "Shadow Page Table"?
  back: |+
    Shadow page tables werden verwendet, um GPA (Guest Physical Address) in HPA
    (Host Physical Address) zu übersetzen.  Dem Gast wird vorgetäuscht, dass er
    direkten Zugriff auf die Hardware hat.

- type: markdown
  id: 14  # (generated)
  front: Wie kann die Übersetzung von GPA (Guest Physical Address) in HPA (Host Physical
    Address) beschleunigt werden?
  back: |
    Hardwareunterstützung (z.B. Intel EPT, AMD RVI) kann durch nested page
    tables die Übersetzung beschleunigen.  Dabei wird zunächst von der MMU die
    GVA (Guest Virtual Address) zu GPA und dann GPA zu HPA übersetzt.

- type: markdown
  id: 15  # (generated)
  front: Was sind Linux Namespaces?
  back: |
    Linux Namespaces sind eine Technologie, um Systemresourcen zu isolieren.  Es gibt
    verschiedene Namespaces für verschiedene Ressourcen, z.B. PID, Network,
    Mount, IPC, UTS, User.

- type: markdown
  id: 16  # (generated)
  front: Was ist der Unterschied zwischen Namespaces und Cgroups?
  back: |
    Namespaces isolieren Ressourcen, Cgroups kontrollieren Ressourcen.

- type: markdown
  id: 17  # (generated)
  front: Was ist ein Mount Namespace?
  back: |
    Mount namespaces isolieren eine Menge von Mountpoints für eine Gruppe von Prozessen.
    Dadurch können verschiedene Sichten auf die Verzeichnisstruktur erzeugt werden.

- type: markdown
  id: 18  # (generated)
  front: Was ist ein PID Namespace?
  back: |
    PID Namespaces isolieren die Prozess-ID-Sichtbarkeit.  Prozesse in verschiedenen
    Namespaces können die gleiche PID haben.

- type: markdown
  id: 19  # (generated)
  front: Was ist ein Network Namespace?
  back: |
    Network Namespaces isolieren das Netzwerkstack.  Jeder Namespace hat seine eigene
    Netzwerkschnittstelle, IP-Adressen, Routing-Tabellen, etc.

- type: markdown
  id: 20  # (generated)
  front: Was ist ein IPC Namespace?
  back: |
    IPC Namespaces isolieren Interprozesskommunikationsmechanismen, z.B. Shared Memory,
    Semaphores, Message Queues.

- type: markdown
  id: 21  # (generated)
  front: Wofür können cgroups verwendet werden?
  back: |
    Cgroups können verwendet werden, um Ressourcen wie CPU, Memory, I/O, etc. zu
    kontrollieren und zu limitieren.

- type: markdown
  id: 22  # (generated)
  front: Was macht der Befehl `unshare`?
  back: |
    Der Befehl `unshare` erstellt einen neuen Namespace und führt das Programm
    (im Argument), oder "${SHELL}" aus.

    Switches wie `--pid`, `--mount`, `--net`, etc. können verwendet werden, um
    den Typ des Namespaces zu bestimmen.

- type: markdown
  id: 23  # (generated)
  front: Wo ist das cgroup Pseudo-Dateisystem gemountet?
  back: |
    Das cgroup Pseudo-Dateisystem ist standardmäßig unter `/sys/fs/cgroup` gemountet.

- type: markdown
  id: 24  # (generated)
  front: Wie können cgroups konfiguriert werden?
  back: |
    Für jede cgroup gibt es ein Verzeichnis unterhalb des cgroup Pseudo-Dateisystems (`/sys/fs/cgroup/{GROUP}`).
    Dort gibt es verschiedene Dateien, die die Ressourcensteuerung konfigurieren.


- type: markdown
  id: 25  # (generated)
  front: Wie kann eine cgroup erstellt werden?
  back: |
    Anlegen eines Verzeichnisses unterhalb des cgroup Pseudo-Dateisystems (z.B.
    `/sys/fs/cgroup/foo`).

- type: markdown
  id: 26  # (generated)
  front: Wie kann ein Prozess in eine cgroup verschoben werden?
  back: |-
    Ein Prozess kann in eine cgroup verschoben werden,
    indem die PID in `/sys/fs/cgroup/{GROUP}/cgroup.procs` geschrieben wird.
