title: Technology Mapping
author: Hugo Melder
id: 270524652305925
cards:
- type: markdown
  front: |
    What is technology mapping?
  back: |
    Converts the **technology independent network** resulting from logic
    optimization by *matching pieces of the network* with the **logic cells**
    available.
- type: markdown
  front: |
    What does the algorithm attempt while performing technology mapping?
  back: |
    Minimize area, while meeting user constraints.
- type: markdown
  front: |
    What is the output of technology mapping?
  back: |
    **Network** of **technology cells**
- type: markdown
  front: |
    What is the three step procedure for technology mapping?
  back: |
    1. Decomposition
    2. Partitioning
    3. Matching and Covering
- type: markdown
  front: |
    What is done in step one when performing technology mapping?
  back: |
    Decomposition. **Boolean function** is restructured into **subject graph**.
- type: markdown
  front: |
    What is done in step two when performing technology mapping?
  back: |
    **Partitioning**. Partitions the big network into sub-networks.
- type: markdown
  front: |
    What is done in step three when performing technology mapping?
  back: |
    - Find *matches between patterns and regions* of cells in the subject graph
    - Use patterns to cover the subject graph
# Decomposition
- type: markdown
  front: |
    What is the most common choice for primitives when decomposing a network?
  back: |
    `NAND2`and `INV`
- type: markdown
  front: |
    True or False. The library cells must be decomposed in logic decomposition.
  back: |
    True.
# Parititoning
- type: markdown
  front: |
    How is the subject network reduced in the partitioning step.
  back: |
    Reduced to many *multi-input*, *single-output* networks.
- type: markdown
  front: |
    Why is the subject network partitioned?
  back: |
    Reduces the size of covering problem.
- type: markdown
  front: |
    What are implications of the partitioning of the subject network?
  back: |
    - Might reduce problem difficulty
    - Hurts the quality of the final solution
- type: markdown
  front: |
    Describe the partitioning algorithm.
  back: |
    - Mark vertices with multiple out degrees
    - Edges whose tails are marked as vertices define the partition boundary
# Pattern Matching and Covering
- type: markdown
  front: |
    What are the two main types of pattern matching?
  back: |
    - Structural matching
    - Boolean matching
- type: markdown
  front: |
    How does the structural matching algorithm work?
  back: |
    Identifies if a pattern tree is isomorphic to a subgraph of the subject tree recursively
- type: markdown
  front: |
    What are problems with structural matching?
  back: |
    - Trees only
      - No matching across fanout nodes
      - No XOR gates
    - Imperfect matchings: Different structure, same function not identified.
# Boolean Matching
- type: markdown
  front: |
    Explain the concept behind boolean matching.
  back: |
    - Relies on matching the pattern to the subject network logically
    - **Decomposition independent**
- type: cloze
  front: |
    Patterns that match {{c1::structurally}} will always match with boolean
    matching, but not necessarly the other way.
- type: markdown
  front: |
    How does boolean matching work?
  back: |
    Matching of two functions f and g involves **comparing to functions for
    equivalence** and **finding and assignments** of the cluster variables to
    pattern inputs.

    **Functional equivalence**.
- type: markdown
  front: |
    How can Equivalence of functions be grouped into categories?
  back: |
    - NPN-equivalent
    - PN-equivalent
    - P-equivalent
- type: markdown
  front: |
    What is NPN equivalence?
  back: |
    Equivalent under input negation, input permutation and output negation.
- type: markdown
  front: |
    What is PN equivalence?
  back: |
    Equivalent under input permutation and output negation.
- type: markdown
  front: |
    What is P equivalence?
  back: |
    Equivalent under input permutation.
# Boolean Signatures
- type: markdown
  front: |
    What are **boolean signatures**?
  back: |
   Signature of a Boolean function is a compact representation that
   characterizes some of the properties of Boolean functions.
- type: markdown
  front: |
    How are **boolean signatures** used?
  back: |
    As filters to reduce computation.
- type: markdown
  front: |
    Examples for **boolean signatures**?
  back: |
    - Symmetries of a function
    - Number of unate/binate variables.
- type: markdown
  front: |
    What are **unate** variables?
  back: |
    A unate variable in a Boolean function has a consistent polarity (always
    appears as x or !x , but not both).
- type: markdown
  front: |
    What are **binate** variables?
  back: |
    A binate variable appears in both forms (x and !x) in the function.
# Covering
- type: cloze
  front: |
    DAG covering is {{c1::NP hard}}.
- type: cloze
  front: |
    Tree-covering-by-tree is {{c1::in P}}.
- type: markdown
  front: |
    What are the two steps in tree-covering-by-tree?
  back: |
    1. *Treeifying*
    2. Dynamic Programming
- type: markdown
  front: |
    How does tree-covering-by-tree dynamic programming algorithm work?
  back: |
    - Visit subject tree bottom up
    - At each vertex attempt to match:
      - Locally rooted sub-tree to all library cells
      - Find best match and record
- type: markdown
  front: |
    What is **Polarity Assignment** in tree-covering-by-tree?
  back: |
    - **Optimal polarity assignment**
    - All connections between base gates are replaced by inverter pairs
      - Connections to or from inverters don't need to be replaced
    - Transformation applied to subject and pattern graphs.
- type: markdown
  front: |
    How is FPGA technology mapping achieved?
  back: |
    - Decomposition and partitioning are still done to reduce the problem to a
    manageable size
    - Matching and covering done differently, as we have LUTs or MUXs.
- type: markdown
  front: |
    How are SOP expressions of a single-output function partitioned into groups
    that are then assigned to LUTs (n-input LUTs)?
  back: |
    - If the function has a total of nvariables, the entire function can be
    implemented in ONE table
    - Else, groups of SOP terms need to be assigned to different tables
    
    -> **Modified Bin Packing**
- type: markdown
  front: |
    How does the **Modified Bin Packing** algorithm work?
  back: |
    - Iterate the following steps until all product term:
      - Select the product term with the *most variables*
      - Place it into any table where it fits, otherwise new table
    - When all product terms done, iterate the following
      - Declare the table with the fewest unused variables as final and
      associate a variable with it
      - Assign this variable to the first table that can accept
    
    Procedure *terminated when only one table is left*.
- type: markdown
  front: |
    Does the **Modified Bin Packing** algorithm always compute an optimal solution?
  back: |
    No it is a heuristic.
- type: markdown
  front: |
    What is Packing?
  back: |
    - Step after matching and covering.
    - Logic block packing groups several LUTs and registers into one logic block
    under constraints
- type: markdown
  front: |
    How does Packing work?
  back: |
    Form of clustering:
    - Dividing a netlist into several pieces, under constraints e.g.  maximum
    partition size
    - Optimizing a goal such as minimizing the number of connections that cross
    partitions